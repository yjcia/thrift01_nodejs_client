//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./hello_types');
//HELPER FUNCTIONS AND STRUCTURES

HelloService_getHelloInterface_args = function (args) {
    this.arg1 = null;
    this.arg2 = null;
    if (args) {
        if (args.arg1 !== undefined) {
            this.arg1 = args.arg1;
        }
        if (args.arg2 !== undefined) {
            this.arg2 = args.arg2;
        }
    }
};
HelloService_getHelloInterface_args.prototype = {};
HelloService_getHelloInterface_args.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.arg1 = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.arg2 = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

HelloService_getHelloInterface_args.prototype.write = function (output) {
    output.writeStructBegin('HelloService_getHelloInterface_args');
    if (this.arg1 !== null && this.arg1 !== undefined) {
        output.writeFieldBegin('arg1', Thrift.Type.STRING, 1);
        output.writeString(this.arg1);
        output.writeFieldEnd();
    }
    if (this.arg2 !== null && this.arg2 !== undefined) {
        output.writeFieldBegin('arg2', Thrift.Type.STRING, 2);
        output.writeString(this.arg2);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

HelloService_getHelloInterface_result = function (args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
HelloService_getHelloInterface_result.prototype = {};
HelloService_getHelloInterface_result.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRING) {
                    this.success = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

HelloService_getHelloInterface_result.prototype.write = function (output) {
    output.writeStructBegin('HelloService_getHelloInterface_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRING, 0);
        output.writeString(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

HelloServiceClient = exports.Client = function (output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
HelloServiceClient.prototype = {};
HelloServiceClient.prototype.seqid = function () {
    return this._seqid;
}
HelloServiceClient.prototype.new_seqid = function () {
    return this._seqid += 1;
}
HelloServiceClient.prototype.getHelloInterface = function (arg1, arg2, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function (error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_getHelloInterface(arg1, arg2);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_getHelloInterface(arg1, arg2);
    }
};

HelloServiceClient.prototype.send_getHelloInterface = function (arg1, arg2) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getHelloInterface', Thrift.MessageType.CALL, this.seqid());
    var args = new HelloService_getHelloInterface_args();
    args.arg1 = arg1;
    args.arg2 = arg2;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

HelloServiceClient.prototype.recv_getHelloInterface = function (input, mtype, rseqid) {
    var callback = this._reqs[rseqid] || function () {
        };
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new HelloService_getHelloInterface_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getHelloInterface failed: unknown result');
};
HelloServiceProcessor = exports.Processor = function (handler) {
    this._handler = handler
}
HelloServiceProcessor.prototype.process = function (input, output) {
    var r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
    }
}

HelloServiceProcessor.prototype.process_getHelloInterface = function (seqid, input, output) {
    var args = new HelloService_getHelloInterface_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getHelloInterface.length === 2) {
        Q.fcall(this._handler.getHelloInterface, args.arg1, args.arg2)
            .then(function (result) {
                var result = new HelloService_getHelloInterface_result({success: result});
                output.writeMessageBegin("getHelloInterface", Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result = new HelloService_getHelloInterface_result(err);
                output.writeMessageBegin("getHelloInterface", Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.getHelloInterface(args.arg1, args.arg2, function (err, result) {
            var result = new HelloService_getHelloInterface_result((err != null ? err : {success: result}));
            output.writeMessageBegin("getHelloInterface", Thrift.MessageType.REPLY, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
}

